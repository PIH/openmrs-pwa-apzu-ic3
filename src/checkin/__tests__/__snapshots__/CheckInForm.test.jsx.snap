// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component: CheckInForm renders properly 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MockRouter
    createHref={[Function]}
    location=""
    params={Object {}}
    path=""
    push={[Function]}
    replace={[Function]}
    url=""
  >
    <ReduxForm
      patient={
        Object {
          "age": 12,
          "gender": "M",
          "name": Object {
            "familyName": "Jones",
            "givenName": "Claire",
          },
          "uuid": "abc",
        }
      }
    >
      <Connect(Form(CheckinForm))
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="checkInForm"
        getFormState={[Function]}
        keepDirtyOnReinitialize={false}
        patient={
          Object {
            "age": 12,
            "gender": "M",
            "name": Object {
              "familyName": "Jones",
              "givenName": "Claire",
            },
            "uuid": "abc",
          }
        }
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      >
        <Form(CheckinForm)
          anyTouched={false}
          array={
            Object {
              "insert": [Function],
              "move": [Function],
              "pop": [Function],
              "push": [Function],
              "remove": [Function],
              "removeAll": [Function],
              "shift": [Function],
              "splice": [Function],
              "swap": [Function],
              "unshift": [Function],
            }
          }
          arrayInsert={[Function]}
          arrayMove={[Function]}
          arrayPop={[Function]}
          arrayPush={[Function]}
          arrayRemove={[Function]}
          arrayRemoveAll={[Function]}
          arrayShift={[Function]}
          arraySplice={[Function]}
          arraySwap={[Function]}
          arrayUnshift={[Function]}
          asyncValidating={false}
          autofill={[Function]}
          blur={[Function]}
          change={[Function]}
          clearAsyncError={[Function]}
          clearFields={[Function]}
          clearSubmit={[Function]}
          clearSubmitErrors={[Function]}
          destroy={[Function]}
          destroyOnUnmount={true}
          dirty={false}
          dispatch={[Function]}
          enableReinitialize={false}
          focus={[Function]}
          forceUnregisterOnUnmount={false}
          form="checkInForm"
          getFormState={[Function]}
          initialize={[Function]}
          initialized={false}
          invalid={false}
          keepDirtyOnReinitialize={false}
          patient={
            Object {
              "age": 12,
              "gender": "M",
              "name": Object {
                "familyName": "Jones",
                "givenName": "Claire",
              },
              "uuid": "abc",
            }
          }
          persistentSubmitErrors={false}
          pristine={true}
          pure={true}
          registerField={[Function]}
          reset={[Function]}
          resetSection={[Function]}
          setSubmitFailed={[Function]}
          setSubmitSucceeded={[Function]}
          shouldAsyncValidate={[Function]}
          shouldError={[Function]}
          shouldValidate={[Function]}
          shouldWarn={[Function]}
          startAsyncValidation={[Function]}
          startSubmit={[Function]}
          stopAsyncValidation={[Function]}
          stopSubmit={[Function]}
          submit={[Function]}
          submitFailed={false}
          submitSucceeded={false}
          submitting={false}
          syncErrors={Object {}}
          syncWarnings={Object {}}
          touch={[Function]}
          touchOnBlur={true}
          touchOnChange={false}
          unregisterField={[Function]}
          untouch={[Function]}
          updateSyncErrors={[Function]}
          updateSyncWarnings={[Function]}
          updateUnregisteredFields={false}
          valid={true}
          validExceptSubmit={true}
          values={Object {}}
        >
          <CheckinForm
            anyTouched={false}
            array={
              Object {
                "insert": [Function],
                "move": [Function],
                "pop": [Function],
                "push": [Function],
                "remove": [Function],
                "removeAll": [Function],
                "shift": [Function],
                "splice": [Function],
                "swap": [Function],
                "unshift": [Function],
              }
            }
            asyncValidate={[Function]}
            asyncValidating={false}
            autofill={[Function]}
            blur={[Function]}
            change={[Function]}
            clearAsyncError={[Function]}
            clearFields={[Function]}
            clearSubmit={[Function]}
            clearSubmitErrors={[Function]}
            destroy={[Function]}
            dirty={false}
            dispatch={[Function]}
            form="checkInForm"
            handleSubmit={[Function]}
            initialize={[Function]}
            initialized={false}
            invalid={false}
            patient={
              Object {
                "age": 12,
                "gender": "M",
                "name": Object {
                  "familyName": "Jones",
                  "givenName": "Claire",
                },
                "uuid": "abc",
              }
            }
            pristine={true}
            pure={true}
            reset={[Function]}
            resetSection={[Function]}
            submit={[Function]}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            touch={[Function]}
            untouch={[Function]}
            valid={true}
          >
            <div>
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsSize="large"
                bsStyle="danger"
                disabled={false}
                onClick={[Function]}
              >
                <button
                  className="btn btn-lg btn-danger"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  Back
                </button>
              </Button>
              <h3>
                <Label
                  bsClass="label"
                  bsStyle="default"
                >
                  <span
                    className="label label-default"
                  >
                    Check-in
                  </span>
                </Label>
              </h3>
              <Form
                bsClass="form"
                componentClass="form"
                horizontal={true}
                inline={false}
                onSubmit={[Function]}
              >
                <form
                  className="form-horizontal"
                  onSubmit={[Function]}
                >
                  <Grid
                    bsClass="container"
                    componentClass="div"
                    fluid={false}
                  >
                    <div
                      className="container"
                    >
                      <Row
                        bsClass="row"
                        componentClass="div"
                      >
                        <div
                          className="row"
                        >
                          <FormGroup
                            bsClass="form-group"
                            controlId="formSubmit"
                          >
                            <div
                              className="form-group"
                            >
                              <Col
                                bsClass="col"
                                componentClass="div"
                                sm={4}
                                smOffset={2}
                              >
                                <div
                                  className="col-sm-4 col-sm-offset-2"
                                >
                                  <ButtonToolbar
                                    bsClass="btn-toolbar"
                                  >
                                    <div
                                      className="btn-toolbar"
                                      role="toolbar"
                                    >
                                      <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsSize="large"
                                        bsStyle="success"
                                        disabled={false}
                                        type="submit"
                                      >
                                        <button
                                          className="btn btn-lg btn-success"
                                          disabled={false}
                                          type="submit"
                                        >
                                          Check-in
                                        </button>
                                      </Button>
                                    </div>
                                  </ButtonToolbar>
                                </div>
                              </Col>
                            </div>
                          </FormGroup>
                        </div>
                      </Row>
                    </div>
                  </Grid>
                </form>
              </Form>
            </div>
          </CheckinForm>
        </Form(CheckinForm)>
      </Connect(Form(CheckinForm))>
    </ReduxForm>
  </MockRouter>
</Provider>
`;
