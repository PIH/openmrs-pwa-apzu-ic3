// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component: SearchPatient renders properly 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <SearchPatient
    columnDefs={Array []}
  >
    <div>
      <h3>
        Search for Patient
      </h3>
      <Connect(PatientSearch)
        rowSelectedActionCreators={
          Array [
            [Function],
            [Function],
          ]
        }
      >
        <PatientSearch
          columnDefs={
            Array [
              Object {
                "field": "uuid",
                "headerName": "uuid",
                "hide": true,
              },
              Object {
                "headerName": "Identifier",
                "valueGetter": [Function],
              },
              Object {
                "field": "name.givenName",
                "headerName": "Given Name",
              },
              Object {
                "field": "name.familyName",
                "headerName": "Family Name",
              },
              Object {
                "field": "gender",
                "headerName": "Gender",
              },
              Object {
                "field": "age",
                "headerName": "Age",
              },
            ]
          }
          dispatch={[Function]}
          parseResults={[Function]}
          representation="custom:(uuid,id,display,identifiers:(uuid,identifier,identifierType:(uuid),preferred),person:(uuid,display,gender,age,birthdate,birthdateEstimated,dead,deathDate,causeOfDeath,names,preferredName,addresses,attributes))"
          rowData={
            Array [
              Object {
                "address": "",
                "age": 18,
                "gender": "M",
                "identifiers": Array [
                  Object {
                    "identifier": "NOP 55 CCC",
                    "preferred": true,
                  },
                ],
              },
            ]
          }
          rowSelectedActionCreators={
            Array [
              [Function],
              [Function],
            ]
          }
        >
          <div>
            <ReduxForm
              onSubmit={[Function]}
            >
              <Connect(Form(PatientSearchForm))
                destroyOnUnmount={true}
                enableReinitialize={false}
                forceUnregisterOnUnmount={false}
                form="search-form"
                getFormState={[Function]}
                keepDirtyOnReinitialize={false}
                onSubmit={[Function]}
                persistentSubmitErrors={false}
                pure={true}
                shouldAsyncValidate={[Function]}
                shouldError={[Function]}
                shouldValidate={[Function]}
                shouldWarn={[Function]}
                touchOnBlur={true}
                touchOnChange={false}
                updateUnregisteredFields={false}
              >
                <Form(PatientSearchForm)
                  anyTouched={false}
                  array={
                    Object {
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeAll": [Function],
                      "shift": [Function],
                      "splice": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                    }
                  }
                  arrayInsert={[Function]}
                  arrayMove={[Function]}
                  arrayPop={[Function]}
                  arrayPush={[Function]}
                  arrayRemove={[Function]}
                  arrayRemoveAll={[Function]}
                  arrayShift={[Function]}
                  arraySplice={[Function]}
                  arraySwap={[Function]}
                  arrayUnshift={[Function]}
                  asyncValidating={false}
                  autofill={[Function]}
                  blur={[Function]}
                  change={[Function]}
                  clearAsyncError={[Function]}
                  clearFields={[Function]}
                  clearSubmit={[Function]}
                  clearSubmitErrors={[Function]}
                  destroy={[Function]}
                  destroyOnUnmount={true}
                  dirty={false}
                  dispatch={[Function]}
                  enableReinitialize={false}
                  focus={[Function]}
                  forceUnregisterOnUnmount={false}
                  form="search-form"
                  getFormState={[Function]}
                  initialize={[Function]}
                  initialized={false}
                  invalid={false}
                  keepDirtyOnReinitialize={false}
                  onSubmit={[Function]}
                  persistentSubmitErrors={false}
                  pristine={true}
                  pure={true}
                  registerField={[Function]}
                  reset={[Function]}
                  resetSection={[Function]}
                  setSubmitFailed={[Function]}
                  setSubmitSucceeded={[Function]}
                  shouldAsyncValidate={[Function]}
                  shouldError={[Function]}
                  shouldValidate={[Function]}
                  shouldWarn={[Function]}
                  startAsyncValidation={[Function]}
                  startSubmit={[Function]}
                  stopAsyncValidation={[Function]}
                  stopSubmit={[Function]}
                  submit={[Function]}
                  submitFailed={false}
                  submitSucceeded={false}
                  submitting={false}
                  syncErrors={Object {}}
                  syncWarnings={Object {}}
                  touch={[Function]}
                  touchOnBlur={true}
                  touchOnChange={false}
                  unregisterField={[Function]}
                  untouch={[Function]}
                  updateSyncErrors={[Function]}
                  updateSyncWarnings={[Function]}
                  updateUnregisteredFields={false}
                  valid={true}
                  validExceptSubmit={true}
                  values={Object {}}
                >
                  <PatientSearchForm
                    anyTouched={false}
                    array={
                      Object {
                        "insert": [Function],
                        "move": [Function],
                        "pop": [Function],
                        "push": [Function],
                        "remove": [Function],
                        "removeAll": [Function],
                        "shift": [Function],
                        "splice": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                      }
                    }
                    asyncValidate={[Function]}
                    asyncValidating={false}
                    autofill={[Function]}
                    blur={[Function]}
                    change={[Function]}
                    clearAsyncError={[Function]}
                    clearFields={[Function]}
                    clearSubmit={[Function]}
                    clearSubmitErrors={[Function]}
                    destroy={[Function]}
                    dirty={false}
                    dispatch={[Function]}
                    form="search-form"
                    handleSubmit={[Function]}
                    initialize={[Function]}
                    initialized={false}
                    invalid={false}
                    onSubmit={[Function]}
                    pristine={true}
                    pure={true}
                    reset={[Function]}
                    resetSection={[Function]}
                    submit={[Function]}
                    submitFailed={false}
                    submitSucceeded={false}
                    submitting={false}
                    touch={[Function]}
                    untouch={[Function]}
                    valid={true}
                  >
                    <Form
                      bsClass="form"
                      componentClass="form"
                      horizontal={false}
                      inline={false}
                      onSubmit={[Function]}
                    >
                      <form
                        className=""
                        onSubmit={[Function]}
                      >
                        <Grid
                          bsClass="container"
                          componentClass="div"
                          fluid={false}
                        >
                          <div
                            className="container"
                          >
                            <Row
                              bsClass="row"
                              componentClass="div"
                            >
                              <div
                                className="row"
                              >
                                <FormGroup
                                  bsClass="form-group"
                                  controlId="searchLabel"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Col
                                      bsClass="col"
                                      componentClass={[Function]}
                                      sm={3}
                                    >
                                      <ControlLabel
                                        bsClass="control-label"
                                        className="col-sm-3"
                                        srOnly={false}
                                      >
                                        <label
                                          className="col-sm-3 control-label"
                                          htmlFor="searchLabel"
                                        >
                                          Search Patients
                                        </label>
                                      </ControlLabel>
                                    </Col>
                                  </div>
                                </FormGroup>
                              </div>
                            </Row>
                            <Row
                              bsClass="row"
                              componentClass="div"
                            >
                              <div
                                className="row"
                              >
                                <FormGroup
                                  bsClass="form-group"
                                  controlId="searchLabel"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Col
                                      bsClass="col"
                                      componentClass="div"
                                      sm={3}
                                    >
                                      <div
                                        className="col-sm-3"
                                      >
                                        <Field
                                          component="input"
                                          name="query"
                                          placeholder="enter name or id"
                                          style={
                                            Object {
                                              "height": "30px",
                                              "width": "-webkit-fill-available",
                                            }
                                          }
                                          type="text"
                                        >
                                          <Connect(ConnectedField)
                                            _reduxForm={
                                              Object {
                                                "anyTouched": false,
                                                "array": Object {
                                                  "insert": [Function],
                                                  "move": [Function],
                                                  "pop": [Function],
                                                  "push": [Function],
                                                  "remove": [Function],
                                                  "removeAll": [Function],
                                                  "shift": [Function],
                                                  "splice": [Function],
                                                  "swap": [Function],
                                                  "unshift": [Function],
                                                },
                                                "arrayInsert": [Function],
                                                "arrayMove": [Function],
                                                "arrayPop": [Function],
                                                "arrayPush": [Function],
                                                "arrayRemove": [Function],
                                                "arrayRemoveAll": [Function],
                                                "arrayShift": [Function],
                                                "arraySplice": [Function],
                                                "arraySwap": [Function],
                                                "arrayUnshift": [Function],
                                                "asyncErrors": undefined,
                                                "asyncValidate": [Function],
                                                "asyncValidating": false,
                                                "autofill": [Function],
                                                "blur": [Function],
                                                "change": [Function],
                                                "clearAsyncError": [Function],
                                                "clearFields": [Function],
                                                "clearSubmit": [Function],
                                                "clearSubmitErrors": [Function],
                                                "destroy": [Function],
                                                "destroyOnUnmount": true,
                                                "dirty": false,
                                                "dispatch": [Function],
                                                "enableReinitialize": false,
                                                "error": undefined,
                                                "focus": [Function],
                                                "forceUnregisterOnUnmount": false,
                                                "form": "search-form",
                                                "getFormState": [Function],
                                                "getValues": [Function],
                                                "initialValues": undefined,
                                                "initialize": [Function],
                                                "initialized": false,
                                                "invalid": false,
                                                "keepDirtyOnReinitialize": false,
                                                "onSubmit": [Function],
                                                "persistentSubmitErrors": false,
                                                "pristine": true,
                                                "pure": true,
                                                "register": [Function],
                                                "registerField": [Function],
                                                "registerInnerOnSubmit": [Function],
                                                "registeredFields": undefined,
                                                "reset": [Function],
                                                "resetSection": [Function],
                                                "sectionPrefix": undefined,
                                                "setSubmitFailed": [Function],
                                                "setSubmitSucceeded": [Function],
                                                "shouldAsyncValidate": [Function],
                                                "shouldError": [Function],
                                                "shouldValidate": [Function],
                                                "shouldWarn": [Function],
                                                "startAsyncValidation": [Function],
                                                "startSubmit": [Function],
                                                "stopAsyncValidation": [Function],
                                                "stopSubmit": [Function],
                                                "submit": [Function],
                                                "submitFailed": false,
                                                "submitSucceeded": false,
                                                "submitting": false,
                                                "syncErrors": Object {},
                                                "syncWarnings": Object {},
                                                "touch": [Function],
                                                "touchOnBlur": true,
                                                "touchOnChange": false,
                                                "triggerSubmit": undefined,
                                                "unregister": [Function],
                                                "unregisterField": [Function],
                                                "untouch": [Function],
                                                "updateSyncErrors": [Function],
                                                "updateSyncWarnings": [Function],
                                                "updateUnregisteredFields": false,
                                                "valid": true,
                                                "validExceptSubmit": true,
                                                "values": Object {},
                                                "warning": undefined,
                                              }
                                            }
                                            component="input"
                                            name="query"
                                            normalize={[Function]}
                                            placeholder="enter name or id"
                                            style={
                                              Object {
                                                "height": "30px",
                                                "width": "-webkit-fill-available",
                                              }
                                            }
                                            type="text"
                                          >
                                            <ConnectedField
                                              _reduxForm={
                                                Object {
                                                  "anyTouched": false,
                                                  "array": Object {
                                                    "insert": [Function],
                                                    "move": [Function],
                                                    "pop": [Function],
                                                    "push": [Function],
                                                    "remove": [Function],
                                                    "removeAll": [Function],
                                                    "shift": [Function],
                                                    "splice": [Function],
                                                    "swap": [Function],
                                                    "unshift": [Function],
                                                  },
                                                  "arrayInsert": [Function],
                                                  "arrayMove": [Function],
                                                  "arrayPop": [Function],
                                                  "arrayPush": [Function],
                                                  "arrayRemove": [Function],
                                                  "arrayRemoveAll": [Function],
                                                  "arrayShift": [Function],
                                                  "arraySplice": [Function],
                                                  "arraySwap": [Function],
                                                  "arrayUnshift": [Function],
                                                  "asyncErrors": undefined,
                                                  "asyncValidate": [Function],
                                                  "asyncValidating": false,
                                                  "autofill": [Function],
                                                  "blur": [Function],
                                                  "change": [Function],
                                                  "clearAsyncError": [Function],
                                                  "clearFields": [Function],
                                                  "clearSubmit": [Function],
                                                  "clearSubmitErrors": [Function],
                                                  "destroy": [Function],
                                                  "destroyOnUnmount": true,
                                                  "dirty": false,
                                                  "dispatch": [Function],
                                                  "enableReinitialize": false,
                                                  "error": undefined,
                                                  "focus": [Function],
                                                  "forceUnregisterOnUnmount": false,
                                                  "form": "search-form",
                                                  "getFormState": [Function],
                                                  "getValues": [Function],
                                                  "initialValues": undefined,
                                                  "initialize": [Function],
                                                  "initialized": false,
                                                  "invalid": false,
                                                  "keepDirtyOnReinitialize": false,
                                                  "onSubmit": [Function],
                                                  "persistentSubmitErrors": false,
                                                  "pristine": true,
                                                  "pure": true,
                                                  "register": [Function],
                                                  "registerField": [Function],
                                                  "registerInnerOnSubmit": [Function],
                                                  "registeredFields": undefined,
                                                  "reset": [Function],
                                                  "resetSection": [Function],
                                                  "sectionPrefix": undefined,
                                                  "setSubmitFailed": [Function],
                                                  "setSubmitSucceeded": [Function],
                                                  "shouldAsyncValidate": [Function],
                                                  "shouldError": [Function],
                                                  "shouldValidate": [Function],
                                                  "shouldWarn": [Function],
                                                  "startAsyncValidation": [Function],
                                                  "startSubmit": [Function],
                                                  "stopAsyncValidation": [Function],
                                                  "stopSubmit": [Function],
                                                  "submit": [Function],
                                                  "submitFailed": false,
                                                  "submitSucceeded": false,
                                                  "submitting": false,
                                                  "syncErrors": Object {},
                                                  "syncWarnings": Object {},
                                                  "touch": [Function],
                                                  "touchOnBlur": true,
                                                  "touchOnChange": false,
                                                  "triggerSubmit": undefined,
                                                  "unregister": [Function],
                                                  "unregisterField": [Function],
                                                  "untouch": [Function],
                                                  "updateSyncErrors": [Function],
                                                  "updateSyncWarnings": [Function],
                                                  "updateUnregisteredFields": false,
                                                  "valid": true,
                                                  "validExceptSubmit": true,
                                                  "values": Object {},
                                                  "warning": undefined,
                                                }
                                              }
                                              asyncValidating={false}
                                              component="input"
                                              dirty={false}
                                              dispatch={[Function]}
                                              name="query"
                                              normalize={[Function]}
                                              placeholder="enter name or id"
                                              pristine={true}
                                              style={
                                                Object {
                                                  "height": "30px",
                                                  "width": "-webkit-fill-available",
                                                }
                                              }
                                              type="text"
                                            >
                                              <input
                                                name="query"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onDragStart={[Function]}
                                                onDrop={[Function]}
                                                onFocus={[Function]}
                                                placeholder="enter name or id"
                                                style={
                                                  Object {
                                                    "height": "30px",
                                                    "width": "-webkit-fill-available",
                                                  }
                                                }
                                                type="text"
                                                value=""
                                              />
                                            </ConnectedField>
                                          </Connect(ConnectedField)>
                                        </Field>
                                      </div>
                                    </Col>
                                    <Col
                                      bsClass="col"
                                      componentClass="div"
                                      sm={2}
                                      style={
                                        Object {
                                          "textAlign": "left",
                                        }
                                      }
                                    >
                                      <div
                                        className="col-sm-2"
                                        style={
                                          Object {
                                            "textAlign": "left",
                                          }
                                        }
                                      >
                                        <Button
                                          active={false}
                                          block={false}
                                          bsClass="btn"
                                          bsSize="small"
                                          bsStyle="primary"
                                          disabled={true}
                                          type="submit"
                                        >
                                          <button
                                            className="btn btn-sm btn-primary"
                                            disabled={true}
                                            type="submit"
                                          >
                                            Search
                                          </button>
                                        </Button>
                                      </div>
                                    </Col>
                                  </div>
                                </FormGroup>
                              </div>
                            </Row>
                            <Row
                              bsClass="row"
                              componentClass="div"
                            >
                              <div
                                className="row"
                              >
                                <Col
                                  bsClass="col"
                                  componentClass="div"
                                  md={20}
                                  sm={20}
                                  style={
                                    Object {
                                      "height": "10px",
                                    }
                                  }
                                >
                                  <div
                                    className="col-md-20 col-sm-20"
                                    style={
                                      Object {
                                        "height": "10px",
                                      }
                                    }
                                  >
                                    <span>
                                      <h1 />
                                    </span>
                                  </div>
                                </Col>
                              </div>
                            </Row>
                          </div>
                        </Grid>
                      </form>
                    </Form>
                  </PatientSearchForm>
                </Form(PatientSearchForm)>
              </Connect(Form(PatientSearchForm))>
            </ReduxForm>
            <Connect(DataGrid)
              columnDefs={
                Array [
                  Object {
                    "field": "uuid",
                    "headerName": "uuid",
                    "hide": true,
                  },
                  Object {
                    "headerName": "Identifier",
                    "valueGetter": [Function],
                  },
                  Object {
                    "field": "name.givenName",
                    "headerName": "Given Name",
                  },
                  Object {
                    "field": "name.familyName",
                    "headerName": "Family Name",
                  },
                  Object {
                    "field": "gender",
                    "headerName": "Gender",
                  },
                  Object {
                    "field": "age",
                    "headerName": "Age",
                  },
                ]
              }
              rowData={
                Array [
                  Object {
                    "address": "",
                    "age": 18,
                    "gender": "M",
                    "identifiers": Array [
                      Object {
                        "identifier": "NOP 55 CCC",
                        "preferred": true,
                      },
                    ],
                  },
                ]
              }
              rowSelectedActionCreators={
                Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ]
              }
            >
              <DataGrid
                columnDefs={
                  Array [
                    Object {
                      "field": "uuid",
                      "headerName": "uuid",
                      "hide": true,
                    },
                    Object {
                      "headerName": "Identifier",
                      "valueGetter": [Function],
                    },
                    Object {
                      "field": "name.givenName",
                      "headerName": "Given Name",
                    },
                    Object {
                      "field": "name.familyName",
                      "headerName": "Family Name",
                    },
                    Object {
                      "field": "gender",
                      "headerName": "Gender",
                    },
                    Object {
                      "field": "age",
                      "headerName": "Age",
                    },
                  ]
                }
                dispatch={[Function]}
                rowData={
                  Array [
                    Object {
                      "address": "",
                      "age": 18,
                      "gender": "M",
                      "identifiers": Array [
                        Object {
                          "identifier": "NOP 55 CCC",
                          "preferred": true,
                        },
                      ],
                    },
                  ]
                }
                rowSelectedActionCreators={
                  Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ]
                }
              >
                <div>
                  <Grid
                    bsClass="container"
                    componentClass="div"
                    fluid={false}
                  >
                    <div
                      className="container"
                    >
                      <Row
                        bsClass="row"
                        componentClass="div"
                      >
                        <div
                          className="row"
                        >
                          <FormGroup
                            bsClass="form-group"
                            controlId="searchAndFilterForm"
                          >
                            <div
                              className="form-group"
                            >
                              <Col
                                bsClass="col"
                                componentClass={[Function]}
                                sm={1}
                                style={
                                  Object {
                                    "textAlign": "right",
                                  }
                                }
                              >
                                <ControlLabel
                                  bsClass="control-label"
                                  className="col-sm-1"
                                  srOnly={false}
                                  style={
                                    Object {
                                      "textAlign": "right",
                                    }
                                  }
                                >
                                  <label
                                    className="col-sm-1 control-label"
                                    htmlFor="searchAndFilterForm"
                                    style={
                                      Object {
                                        "textAlign": "right",
                                      }
                                    }
                                  >
                                    Search:
                                  </label>
                                </ControlLabel>
                              </Col>
                              <Col
                                bsClass="col"
                                componentClass="div"
                                sm={3}
                                style={
                                  Object {
                                    "textAlign": "left",
                                  }
                                }
                              >
                                <div
                                  className="col-sm-3"
                                  style={
                                    Object {
                                      "textAlign": "left",
                                    }
                                  }
                                >
                                  <input
                                    onChange={[Function]}
                                    type="text"
                                  />
                                </div>
                              </Col>
                              <Col
                                bsClass="col"
                                componentClass={[Function]}
                                sm={1}
                                style={
                                  Object {
                                    "textAlign": "right",
                                  }
                                }
                              >
                                <ControlLabel
                                  bsClass="control-label"
                                  className="col-sm-1"
                                  srOnly={false}
                                  style={
                                    Object {
                                      "textAlign": "right",
                                    }
                                  }
                                >
                                  <label
                                    className="col-sm-1 control-label"
                                    htmlFor="searchAndFilterForm"
                                    style={
                                      Object {
                                        "textAlign": "right",
                                      }
                                    }
                                  >
                                    Filter:
                                  </label>
                                </ControlLabel>
                              </Col>
                              <Col
                                bsClass="col"
                                componentClass="div"
                                sm={6}
                              >
                                <div
                                  className="col-sm-6"
                                />
                              </Col>
                            </div>
                          </FormGroup>
                        </div>
                      </Row>
                    </div>
                  </Grid>
                  <div
                    className="grid-wrapper"
                    id="omrsGrid"
                  >
                    <AgGridReact
                      animateRows={true}
                      columnDefs={
                        Array [
                          Object {
                            "field": "uuid",
                            "headerName": "uuid",
                            "hide": true,
                          },
                          Object {
                            "headerName": "Identifier",
                            "valueGetter": [Function],
                          },
                          Object {
                            "field": "name.givenName",
                            "headerName": "Given Name",
                          },
                          Object {
                            "field": "name.familyName",
                            "headerName": "Family Name",
                          },
                          Object {
                            "field": "gender",
                            "headerName": "Gender",
                          },
                          Object {
                            "field": "age",
                            "headerName": "Age",
                          },
                        ]
                      }
                      enableFiltering={true}
                      enableSorting={true}
                      id="omrsGrid"
                      onFilterChanged={[Function]}
                      onGridReady={[Function]}
                      onGridSizeChanged={[Function]}
                      onRowDataChanged={[Function]}
                      onSelectionChanged={[Function]}
                      rowClassRules="rowClassRules"
                      rowData={
                        Array [
                          Object {
                            "address": "",
                            "age": 18,
                            "gender": "M",
                            "identifiers": Array [
                              Object {
                                "identifier": "NOP 55 CCC",
                                "preferred": true,
                              },
                            ],
                          },
                        ]
                      }
                      rowSelection="single"
                      style="width: 100%; height: 100%;"
                    >
                      <div
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      />
                    </AgGridReact>
                  </div>
                </div>
              </DataGrid>
            </Connect(DataGrid)>
          </div>
        </PatientSearch>
      </Connect(PatientSearch)>
    </div>
  </SearchPatient>
</Provider>
`;
